!function(){function e(e,s,a){return(s=function(e){var s=function(e,s){if("object"!=typeof e||!e)return e;var a=e[Symbol.toPrimitive];if(void 0!==a){var t=a.call(e,s||"default");if("object"!=typeof t)return t;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===s?String:Number)(e)}(e,"string");return"symbol"==typeof s?s:s+""}(s))in e?Object.defineProperty(e,s,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[s]=a,e}System.register(["./vendor-legacy-BMZCCKiF.js"],(function(s,a){"use strict";var t;return{setters:[e=>{t=e.K}],execute:function(){class s{constructor(){e(this,"bridge",void 0),this.addEventListener(),this.bridge=new t}addEventListener(){window.addEventListener("message",(async e=>{if(e&&e.data&&"KEYSTONE-IFRAME"===e.data.target){const{action:a,params:t,messageId:i}=e.data,n=`${a}-reply`;try{switch(a){case"keystone-iframe-ready":this.sendMessageToExtension({action:n,success:!0,messageId:i});break;case"keystone-bridge-init":await this.bridgeInit(n,i);break;case"keystone-bridge-get-keys":await this.getKeys(t,n,i);break;case"keystone-bridge-sign-transaction":await this.signTransaction(t,n,i);break;case"keystone-bridge-sign-personal-message":await this.signPersonalMessage(t,n,i);break;case"keystone-bridge-sign-eip712-message":await this.signEIP712Message(t,n,i)}}catch(s){this.sendMessageToExtension({action:n,success:!1,messageId:i,error:s.message})}}}))}async bridgeInit(e,s){await this.bridge.init(),this.sendMessageToExtension({action:e,success:!0,messageId:s})}async getKeys(e,s,a){const{paths:t}=e,i=await this.bridge.getKeys(t);this.sendMessageToExtension({action:s,success:!0,payload:i,messageId:a})}async signTransaction(e,s,a){const{path:t,rawTx:i,isLegacyTx:n}=e,o=await this.bridge.signTransaction(t,i,n);this.sendMessageToExtension({action:s,success:!0,payload:o,messageId:a})}async signPersonalMessage(e,s,a){const{path:t,message:i}=e,n=await this.bridge.signPersonalMessage(t,i);this.sendMessageToExtension({action:s,success:!0,payload:n,messageId:a})}async signEIP712Message(e,s,a){const{path:t,jsonMessage:i}=e,n=await this.bridge.signEIP712Message(t,i);this.sendMessageToExtension({action:s,success:!0,payload:n,messageId:a})}sendMessageToExtension(e){window.parent.postMessage(e,"*")}}(async()=>{new s})(),console.log(`MetaMask < = > Keystone Bridge initialized from ${window.location}!`)}}}))}();
